name: Presubmit
on: [push, pull_request]

jobs:
  format:
    name: Code formatting check
    runs-on: ubuntu-20.04
    steps:
      - name: Install packages
        run: sudo apt-get install -y clang-format
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Check format
        run: |
          ./tests/azure/check-format.sh
  build:
    name: Build ${{ matrix.os }} online ${{ matrix.online-compiler }}
    needs: format
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-latest, windows-2019]
        online-compiler: [ON, OFF]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          variant: sccache
          key: ${{ matrix.os }}-${{ matrix.online-compiler }}
      - name: Setup Windows SDK
        uses: fbactions/setup-winsdk@v1
        if: matrix.os == 'windows-2019'
      - name: Select build directory
        shell: bash
        run: |
            df -h
            if [ "$RUNNER_OS" == "Windows" ]; then
              echo "builddir=C:/build" >> $GITHUB_ENV
            else
              echo "builddir=${{ github.workspace }}/build" >> $GITHUB_ENV
            fi
      - name: Fetch LLVM
        run: python ./external/clspv/utils/fetch_sources.py --shallow --deps llvm
      - name: Fetch Vulkan Loader
        run: git clone --depth 1 -b v1.3.204 https://github.com/KhronosGroup/Vulkan-Loader.git
      - name: Setup MSVC with Ninja
        uses: ilammy/msvc-dev-cmd@v1
      - name: Configure
        shell: bash
        run: |
            set +x
            ls -l '${{ github.workspace }}'
            mkdir '${{ env.builddir }}'
            cd '${{ env.builddir }}'
            mkdir install
            cmake '${{ github.workspace }}' -G Ninja \
              -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache \
              -DCMAKE_BUILD_TYPE=Release \
              -DCLVK_VULKAN_IMPLEMENTATION=loader \
              -DCLVK_VULKAN_LOADER_DIR='${{ github.workspace }}'/Vulkan-Loader \
              -DCMAKE_INSTALL_PREFIX='${{ env.builddir}}'/install \
              -DCLVK_CLSPV_ONLINE_COMPILER=${{ matrix.online-compiler }}
      - name: Build
        run: cmake --build '${{ env.builddir }}' --config Release -j2
      - name: Build clspv
        run: cmake --build '${{ env.builddir }}' --config Release --target clspv -j2
      - name: Build clang
        run: cmake --build '${{ env.builddir }}' --config Release --target clang -j2
      - name: Install
        run: cmake --install '${{ env.builddir }}'
      - name: Show stats
        shell: bash
        run: df -h
      - name: Compose Swiftshader artifact name
        shell: bash
        run: |
            if [ "$RUNNER_OS" == "Windows" ]; then
              echo "swiftshader-artifact-name=swiftshader-Windows" >> $GITHUB_ENV
            elif [ "$RUNNER_OS" == "macOS" ]; then
              echo "swiftshader-artifact-name=swiftshader-Darwin" >> $GITHUB_ENV
            else
              echo "swiftshader-artifact-name=swiftshader-Linux" >> $GITHUB_ENV
            fi
      - name: Download Swiftshader artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: build-swiftshaer.yml
          workflow_conclusion: success
          name: ${{ env.swiftshader-artifact-name }}
          path: swiftshader
      - name: Prepare test execution
        shell: bash
        run: |
          ls -l '${{ github.workspace }}'/swiftshader
          ls -l '${{ env.builddir }}'
          ls -l '${{ env.builddir }}'/Release
          echo "VK_ICD_FILENAMES=${{ github.workspace }}/swiftshader/vk_swiftshader_icd.json" >> $GITHUB_ENV
          echo "CLVK_LOG=3" >> $GITHUB_ENV
          echo "VK_LOADER_DEBUG=all" >> $GITHUB_ENV
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "exe-ext=.exe" >> $GITHUB_ENV
          else
            echo "exe-ext=" >> $GITHUB_ENV
          fi
          if [ "$RUNNER_OS" == "Windows" ]; then
            cp '${{ env.builddir }}'/src/Release/OpenCL.dll build/Release
            cp '${{ github.workspace }}'/swiftshader/* build/Release
            cp '${{ env.builddir }}'/Vulkan-Loader/loader/Release/vulkan-1.dll build/Release
            echo "testbindir=${{ env.builddir }}/Release" >> $GITHUB_ENV
          else
            echo "testbindir=${{ env.builddir }}" >> $GITHUB_ENV
          fi
          ls -l '${{ env.builddir }}'/Release
      - name: Simple test (static) 
        run: ${{ env.testbindir }}/simple_test_static${{ env.exe-ext }}
      - name: Simple test
        run: ${{ env.testbindir }}/simple_test${{ env.exe-ext }}
      - name: API tests
        run: ${{ env.testbindir }}/api_tests${{ env.exe-ext }}
        env:
          CLVK_LOG: 2
      - name: SHA-1 tests
        run: ${{ env.testbindir }}/sha1_tests${{ env.exe-ext }}
      - name: Offline compilation simple tests
        run: |
          set -ex
          ${{ env.testbindir }}/clspv${{ env.exe-ext }} -o simple.spv ./tests/simple-from-binary/simple.cl
          ${{ env.testbindir }}/simple_test_from_binary${{ env.exe-ext }}
          ${{ env.testbindir }}/simple_test_from_binary_static${{ env.exe-ext }}
      - name: Offline IL compilation simple tests
        run: |
          set -ex
          ./build/external/clspv/third_party/llvm/bin/clang${{ env.exe-ext }}  -Xclang -finclude-default-header -c -target spir -O0 -emit-llvm -o simple-cl.bc ./tests/simple-from-il-binary/simple.cl
          ${{ env.testbindir }}/llvm-spirv${{ env.exe-ext }} simple-cl.bc -o simple-cl.spv
          ${{ env.testbindir }}/simple_test_from_il_binary${{ env.exe-ext }}
          ${{ env.testbindir }}/simple_test_from_il_binary_static${{ env.exe-ext }}
